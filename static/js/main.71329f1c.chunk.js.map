{"version":3,"sources":["QuoteBox.js","index.js"],"names":["Buttons","props","react_default","a","createElement","className","id","target","rel","href","onClick","QuoteBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextQuote","bind","assertThisInitialized","state","isLoaded","error","quotes","setState","_this2","fetch","then","res","json","data","stateData","map","e","i","objectSpread","link","encodeURI","quote","author","_this$state","Fragment","QuoteBox_Buttons","num","Math","floor","random","length","React","Component","ReactDOM","render","src_QuoteBox","document","getElementById"],"mappings":"sPAEMA,EAAU,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,cACNC,OAAO,SACPC,IAAI,sBACJC,KAAMR,EAAMQ,MAHZ,SAKAP,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYI,QAAST,EAAMS,SAAtC,eAqFKC,cA/Eb,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,UAAYP,EAAKO,UAAUC,KAAfP,OAAAQ,EAAA,EAAAR,CAAAD,IACjBA,EAAKU,MAAQ,CACXC,UAAU,EACVC,MAAO,KACPC,OAAQ,IANKb,2EAWZG,KAAKO,MAAME,MACbT,KAAKW,SAAS,CACZH,UAAU,EACVC,MAAO,KACPC,OAAQ,KAGVV,KAAKW,SAAS,gDAIC,IAAAC,EAAAZ,KAClBa,MAAM,4FACHC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACG,GAEL,IAAIC,EAAYD,EAAKE,IAAI,SAACC,EAAGC,GAC3B,OAAOvB,OAAAwB,EAAA,EAAAxB,CAAA,GAAIsB,EAAX,CAAc7B,GAAI8B,EAAI,EAAGE,KAAM,0CAAkDC,UAAUJ,EAAEK,OAAS,OAAUD,UAAUJ,EAAEM,YAG9Hd,EAAKD,SAAS,CACZH,UAAU,EACVE,OAAQQ,EAAUC,IAAI,SAAAC,GAAC,OAAEA,OAE1B,SAACX,GACFG,EAAKD,SAAS,CACZH,UAAU,EACVC,MAAOA,uCAKN,IAAAkB,EAC2B3B,KAAKO,MAAhCG,EADAiB,EACAjB,OAAQD,EADRkB,EACQlB,MAEb,GAHKkB,EACenB,SAYb,IAAIC,EACP,OACEtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACEzC,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,6CAGAJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,WACNJ,EAAAC,EAAAC,cAACwC,EAAD,CAASnC,KAAM,KAAMC,QAASK,KAAKI,aAIzC,IAAI0B,EAAMC,KAAKC,MAAMD,KAAKE,SAAWvB,EAAOwB,QAC5C,OACE/C,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACIzC,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAQmB,EAAOoB,GAAKL,OAC1BtC,EAAAC,EAAAC,cAAA,KAAGE,GAAG,UAAU,KAAOmB,EAAOoB,GAAKJ,QACnCvC,EAAAC,EAAAC,cAACwC,EAAD,CAASnC,KAAMgB,EAAOoB,GAAKP,KAAM5B,QAASK,KAAKI,aAzBrD,OACEjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACIzC,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QACJJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAElBH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,WACNJ,EAAAC,EAAAC,cAACwC,EAAD,CAASnC,KAAM,KAAMC,QAASK,KAAKI,oBAtD1B+B,IAAMC,WCV7BC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAAcC,SAASC,eAAe","file":"static/js/main.71329f1c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Buttons = (props) => {\n  return (\n      <div className=\"buttons\">\n          <a id=\"tweet-quote\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={props.href}>\n          Tweet</a>\n          <button id=\"new-quote\" onClick={props.onClick}>New Quote</button>\n      </div>\n  )\n}\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n      super(props)\n      this.nextQuote = this.nextQuote.bind(this)\n      this.state = {\n        isLoaded: false,\n        error: null,\n        quotes: []\n      }\n  }\n\n  nextQuote() {\n     if (this.state.error) {\n       this.setState({\n         isLoaded: false,\n         error: null,\n         quotes: []\n       })\n     } else {\n       this.setState({})\n     }\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/yozhikvtumane/random-quote-react/master/js/quotes.json\")\n      .then((res) => res.json())\n      .then((data) => {\n\n        let stateData = data.map((e, i) => {\n          return {...e, id: i + 1, link: 'https://twitter.com/intent/tweet?text=' + \"\\\"\" + encodeURI(e.quote) + \"\\\" - \" + encodeURI(e.author)}\n        })\n\n        this.setState({\n          isLoaded: true,\n          quotes: stateData.map(e=>e)\n        })\n      }, (error)=>{\n        this.setState({\n          isLoaded: true,\n          error: error\n        })\n      })\n  }\n\n  render() {\n      let {quotes, error, isLoaded} = this.state\n\n      if (!isLoaded) {\n        return (\n          <React.Fragment>\n              <p id=\"text\">\n                <span className=\"loader-active\"></span>\n              </p>\n              <p id=\"author\"></p>\n              <Buttons href={null} onClick={this.nextQuote}/>\n          </React.Fragment>\n        )\n      } else if (error) {\n          return (\n            <React.Fragment>\n              <p id=\"text\">\n                There was an error with loading quotes...\n              </p>\n              <p id=\"author\"></p>\n              <Buttons href={null} onClick={this.nextQuote}/>\n            </React.Fragment>\n          )\n      } else {\n        let num = Math.floor(Math.random() * quotes.length)\n        return (\n          <React.Fragment>\n              <p id=\"text\">{quotes[num].quote}</p>\n              <p id=\"author\">{\"- \" + quotes[num].author}</p>\n              <Buttons href={quotes[num].link} onClick={this.nextQuote}/>\n          </React.Fragment>\n        )\n      }\n  }\n}\n\nexport default QuoteBox\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteBox from './QuoteBox';\n\nReactDOM.render(<QuoteBox />, document.getElementById('quote-box'));\n\n"],"sourceRoot":""}